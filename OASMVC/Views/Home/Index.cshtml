@{
    ViewData["Title"] = "Home Page";
}

<div class="dx-fieldset">
    <div class="dx-field">
        <div class="dx-field-label">
            Network Node:
        </div>
        <div class="dx-field-value">
            @(Html.DevExtreme().SelectBox()
                .ID("networkNode")
                .DataSource(d => d.Mvc().LoadAction("GetNetworkNodes").Controller("TagAPI").Key("NodeName"))
                .DisplayExpr("NodeName")
                .ValueExpr("NodeName")
                .Value("Select Node")
                .OnValueChanged("changeNode")
            )
        </div>
    </div>
    <div class="dx-field">
        <div class="dx-field-label">
            OAS Version:
        </div>
        <div class="dx-field-value">
            @(Html.DevExtreme().TextBox()
                .ID("txtVersion")
                .ReadOnly(true)
            )
        </div>
    </div>
    <div class="dx-field">
        <div class="dx-field-label">
            Server Groups:
        </div>
        <div class="dx-field-value">
            @(Html.DevExtreme().SelectBox()
                .ID("serverGroups")
                .Visible(false)
                .OnValueChanged("changeGroup")
            )
        </div>
    </div>
    <div class="dx-field">
        <div class="dx-field-label">
            Tags:
        </div>
        <div class="dx-field-value">
            @(Html.DevExtreme().DataGrid<OASMVC.Models.OASTagModels.TagList>()
                .ID("tagList")
                .ShowBorders(true)
                .Visible(false)
                .RepaintChangesOnly(true)
                .HighlightChanges(true)
                .Columns(c =>
                {
                    c.AddFor(m => m.TagId).DataField("tagId").Visible(false);
                    c.AddFor(m => m.TagName).DataField("tagName");
                    c.AddFor(m => m.TimeStamp).DataField("timeStamp").Format(Format.LongTime);
                    c.AddFor(m => m.Value).DataField("value");

                })
            )
        </div>
    </div>
    <div>
        @(Html.DevExtreme().Chart()
                .ID("testChart")
                .Title("Amp Values")
                .CommonSeriesSettings(s => s
                    .ArgumentField("timeStamp")
                    .Type(SeriesType.Spline)
                )
                .Series(s =>
                {
                    s.Add().ValueField("value").Name("Value");
                })
                .ArgumentAxis(a =>
                {
                    a.ArgumentType(ChartDataType.DateTime)
                    .ValueMarginsEnabled(false)
                    .VisualRange(v => v.Length(VizTimeInterval.Hour));
                })
                .ValueAxis(v => v.Add().PlaceholderSize(50))
                .ScrollBar(s => s.Visible(true))
                .ZoomAndPan(z => z.ArgumentAxis(ChartZoomAndPanMode.Both))
        )
    </div>
    <div>
        @(Html.DevExtreme().CircularGauge()
            .ID("testGauge")
            .Title("Gauge Test")
            .Value(0)
        )
    </div>
</div>
